Georges collection of bib stuff
http://linux-audio.com/jack/ --JACK documentation
http://www.alsa-project.org/alsa-doc/alsa-lib/ --alsa sound driver documentation
home.roadrunner.com.com/~jgglatt/tech/linuxapi.htm --listing device numbers and cards in C++
http://wiki.gentoo.org/wiki/ALSA --listing devices using console commands & use of ALSA in coordination with JACK
http://jackaudio.org/linux_rt_config --configuration of realtime setting for JACK
http://askubuntu.com/questions/123798/how-to-hear-my-voice-in-speakers-with-a-mic --answer for acquiring realtime sound and processing it
http://keithv.com/software/portaudio/ -- "PortAudioRecPlay" C++ code based recording to a file
http://portaudio.com --library for PortAudioRecPlay
https://github.com/ger7/MMP.git -- Github address
http://www.phys.unsw.edu.au/jw/notes.html --"Note names, MIDI numbers and frequencies" - A short write up on midi/frequency/note conversions, accessed on 28/02/2014
http://iub.edu/~emusic/etext/synthesis/chapter4_pv.shtml -- "Introduction to Computer Music: Volume One: Chapter Four Synthesis" - Notes on sample rate and hope size, accessed on 28/02/2014
http://www.wikihow.com/Calculate-Outliers -- "How to calculate outliers" - self explanatory title, accessed on 28/02/2014
https://gist.github.com/EmilHernvall/953968 -- "Simple implementation of vector in C" - Emil Hernvall , accessed on 03/03/2014
http://www.codebeach.com/2008/09/sorting-algorithms-in-c.html -- "sorting algorithms in C" - Article by Sig9 accessed on 03/03/2014 

TODO

Tried to use jack with aubio to be able to discern a pithc in real time

Ended up trying to configure ALSA to work with JACK, also trying to configure JACK - with little success

Divide values given from PortAudioRecPlay by 10,000 and read them in in blocks of 8 when processing the sound using aubio. Divide by 10,000 because values given in the array of floats that aubio uses are between -1 and 1. --DONE

Compile the program --make sure to check in parseargs --DONE

Match degrees of robots arm movement to match a frequency change in Hz, starting with a change of 1 degree producing a change of "x"Hz TODO

Improve pitch analysis and gaining a proper average of pitch in aubio in relation to Theremin speaker output. Could look into standard deviation. Maybe take the most repeated value and remove outliers from averaging i.e. ones that are radically different from the most repeated value/furthest away from the average?


Cbits compilations:
gcc -c -Wall -Werror -fPIC utils.c -I../../aubio-0.4.0/src
gcc -shared -fPIC -o libCaubio.so utils.c -I../../aubio-0.4.0/src -L../../aubio-0.4.0/build/src/libaubio.a

Shouldn't need to execute this line, but just in case:
export LD_LIBRARY_PATH=/home/icub/Documents/MMP-George/Theremin/cbits:$LD_LIBRARY_PATH










